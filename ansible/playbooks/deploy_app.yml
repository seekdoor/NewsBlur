---
- name: DEPLOY -> app
  hosts: app,staging
  gather_facts: false
  # serial: "50%"
  vars_files:
    - ../env_vars/base.yml
    - roles/letsencrypt/defaults/main.yml
  vars:
    haproxy_host: "{{ 'hstaging' if 'staging' in inventory_hostname else 'hwww' }}"

  tasks:
    # - name: Leave consul
    #   command: consul leave
    #   ignore_errors: yes

    - name: Update Sentry release
      connection: local
      run_once: yes
      shell: >
        curl {{ sentry_web_release_webhook }}/ \
        -X POST \
        -H 'Content-Type: application/json' \
        -d '{"version": "{{ lookup('pipe', 'date "+%Y-%m-%d %H:%M:%S"') }}"}'

    - name: Cleanup static assets before compression
      run_once: yes
      connection: local
      file:
        state: absent
        path: /srv/newsblur/static
      tags:
        - never
        - static

    - name: Updating NewsBlur Deploy container
      run_once: yes
      connection: local
      command: chdir=/srv/newsblur docker pull newsblur/newsblur_deploy
      tags:
        - never
        - static

    - name: Compressing JS/CSS assets
      run_once: yes
      connection: local
      command: chdir=/srv/newsblur docker run --rm -v /srv/newsblur:/srv/newsblur newsblur/newsblur_deploy
      tags:
        - never
        - static

    - name: Archive JS/CSS assets for uploading
      run_once: yes
      connection: local
      archive:
        path: /srv/newsblur/static/
        dest: /srv/newsblur/static.tgz
      tags:
        - never
        - static

    - name: Ensure AWS dependencies installed
      run_once: yes
      connection: local
      pip:
        name:
          - boto3
          - botocore
        virtualenv: ~/.virtualenvs/newsblur
      tags:
        - never
        - static

    - name: Uploading JS/CSS assets to S3
      run_once: yes
      connection: local
      amazon.aws.aws_s3:
        bucket: newsblur-backups
        object: /static_py3.tgz
        src: /srv/newsblur/static.tgz
        mode: put
        overwrite: different
        aws_access_key: "{{ lookup('ini', 'aws_access_key_id section=default file=/srv/secrets-newsblur/keys/aws.s3.token') }}"
        aws_secret_key: "{{ lookup('ini', 'aws_secret_access_key section=default file=/srv/secrets-newsblur/keys/aws.s3.token') }}"
        endpoint_url: "https://s3.us-east-1.amazonaws.com"
      tags:
        - never
        - static

    - name: Downloading JS/CSS assets from S3
      vars:
        ansible_python_interpreter: /usr/bin/python3
      amazon.aws.aws_s3:
        bucket: newsblur-backups
        object: /static_py3.tgz
        dest: /srv/newsblur/static.tgz
        mode: get
        overwrite: different
        aws_access_key: "{{ lookup('ini', 'aws_access_key_id section=default file=/srv/secrets-newsblur/keys/aws.s3.token') }}"
        aws_secret_key: "{{ lookup('ini', 'aws_secret_access_key section=default file=/srv/secrets-newsblur/keys/aws.s3.token') }}"
        endpoint_url: "https://s3.us-east-1.amazonaws.com"
      tags:
        - never
        - static
      register: jscss_updated

    - name: Decompress downloaded JS/CSS
      unarchive:
        src: /srv/newsblur/static.tgz
        dest: /srv/newsblur/static
      when: jscss_updated is succeeded
      tags:
        - never
        - static

    - name: Pull newsblur_web github
      git:
        repo: https://github.com/samuelclay/NewsBlur.git
        dest: /srv/newsblur/
        version: master
      register: pulled
      tags:
        - static

    - name: Start backup container on port 8001
      docker_container:
        name: newsblur_web_backup
        image: newsblur/newsblur_python3
        container_default_behavior: no_defaults
        pull: yes
        env:
          DOCKERBUILD: ""
        state: started
        command: gunicorn --config /srv/newsblur/config/gunicorn_conf.py newsblur_web.wsgi:application
        hostname: "{{ inventory_hostname }}"
        log_driver: json-file
        log_options:
          max-size: 100m
        networks_cli_compatible: yes
        network_mode: default
        networks:
          - name: newsblurnet
        ports:
          - "8001:8000"
        restart_policy: no
        user: 1000:1001
        volumes:
          - /srv/newsblur:/srv/newsblur

    - name: Wait for backup container to be healthy
      uri:
        url: "http://localhost:8001/_haproxychk"
        status_code: 200
      register: result_8001
      retries: 10
      delay: 5
      until: result_8001.status == 200

    - name: Update HAProxy config to use backup server
      delegate_to: "{{ haproxy_host }}"
      run_once: true
      block:
        - name: Generate temporary HAProxy config with backup server
          template:
            src: /srv/newsblur/docker/haproxy/haproxy.consul.cfg.j2
            dest: /srv/newsblur/docker/haproxy/haproxy.consul.cfg.new
          when: disable_consul_services_ie_staging is not defined
          vars:
            maintenance_mode: true

        - name: Generate temporary HAProxy config with backup server
          template:
            src: /srv/newsblur/docker/haproxy/haproxy.staging.cfg
            dest: /srv/newsblur/docker/haproxy/haproxy.consul.cfg.new
          when: disable_consul_services_ie_staging is defined
          vars:
            maintenance_mode: true

        - name: Verify new HAProxy config
          shell: docker exec haproxy haproxy -c -f /srv/newsblur/docker/haproxy/haproxy.consul.cfg.new
          register: haproxy_verified
          failed_when: haproxy_verified.rc != 0

        - name: Replace active HAProxy config
          command: mv /srv/newsblur/docker/haproxy/haproxy.consul.cfg.new /srv/newsblur/docker/haproxy/haproxy.consul.cfg

        - name: Reload HAProxy configuration
          shell: "docker kill -s HUP haproxy"

        - name: Wait for HAProxy to start using new configuration
          pause:
            seconds: 2

    - name: Stop primary container
      docker_container:
        name: newsblur_web
        state: stopped
        container_default_behavior: no_defaults

    - name: Deploy new container
      docker_container:
        name: newsblur_web
        image: newsblur/newsblur_python3
        container_default_behavior: no_defaults
        pull: yes
        env:
          DOCKERBUILD: ""
        state: started
        command: gunicorn --config /srv/newsblur/config/gunicorn_conf.py newsblur_web.wsgi:application
        hostname: "{{ inventory_hostname }}"
        log_driver: json-file
        log_options:
          max-size: 100m
        networks_cli_compatible: yes
        network_mode: default
        networks:
          - name: newsblurnet
        ports:
          - "8000:8000"
        restart_policy: unless-stopped
        user: 1000:1001
        volumes:
          - /srv/newsblur:/srv/newsblur

    - name: Wait for new container to be healthy
      uri:
        url: "http://localhost:8000/_haproxychk"
        status_code: 200
      register: result_8000
      retries: 10
      delay: 5
      until: result_8000.status == 200

    - name: Update HAProxy config to use new server
      delegate_to: "{{ haproxy_host }}"
      run_once: true
      block:
        - name: Generate temporary HAProxy config with new server
          template:
            src: /srv/newsblur/docker/haproxy/haproxy.consul.cfg.j2
            dest: /srv/newsblur/docker/haproxy/haproxy.consul.cfg.new
          when: disable_consul_services_ie_staging is not defined
          vars:
            maintenance_mode: false

        - name: Generate temporary HAProxy config with new server
          template:
            src: /srv/newsblur/docker/haproxy/haproxy.staging.cfg
            dest: /srv/newsblur/docker/haproxy/haproxy.consul.cfg.new
          when: disable_consul_services_ie_staging is defined
          vars:
            maintenance_mode: false

        - name: Verify new HAProxy config
          shell: docker exec haproxy haproxy -c -f /srv/newsblur/docker/haproxy/haproxy.consul.cfg.new
          register: haproxy_verified
          failed_when: haproxy_verified.rc != 0

        - name: Replace active HAProxy config
          command: mv /srv/newsblur/docker/haproxy/haproxy.consul.cfg.new /srv/newsblur/docker/haproxy/haproxy.consul.cfg

        - name: Reload HAProxy configuration
          shell: "docker kill -s HUP haproxy"

    - name: Stop and remove backup container
      docker_container:
        name: newsblur_web_backup
        state: absent
        container_default_behavior: no_defaults

    - name: Start Consul
      become: yes
      service:
        name: consul
        state: started
        enabled: true

    - name: Entering maintenance mode
      template:
        src: /srv/newsblur/templates/maintenance_off.html
        dest: /srv/newsblur/templates/maintenance_on.html
      tags:
        - never
        - maintenance_on

    - name: Leaving maintenance mode
      file:
        path: /srv/newsblur/templates/maintenance_on.html
        state: absent
      tags:
        - never
        - maintenance_off
